{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\Full-Stack Developer\\\\main-crud\\\\main-crud\\\\src\\\\Components\\\\AppProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(null);\nfunction AppProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState([]);\n  const [author, setAuthor] = useState([]);\n  useEffect(() => {\n    const getUser = async () => {\n      try {\n        const response = await fetch(\"https://6421c7e934d6cd4ebd7bbdbe.mockapi.io/common\", {\n          method: \"GET\"\n        });\n        const data = await response.json();\n        console.log(data);\n        setUser(data);\n        if (!data) {\n          console.log(\"data cound not fetch\");\n        }\n      } catch (error) {\n        console.log(\"data not found\");\n      }\n    };\n    getUser();\n    const getAuthor = async () => {\n      try {\n        const response = await fetch(\"https://655b477aab37729791a8d482.mockapi.io/crud/api\", {\n          method: \"GET\"\n        });\n        const data = await response.json();\n        console.log(data);\n        setAuthor(data);\n        if (!data) {\n          console.log(\"data cound not fetch\");\n        }\n      } catch (error) {\n        console.log(\"data not found\");\n      }\n    };\n    getAuthor();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      user,\n      setUser,\n      author,\n      setAuthor\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(AppProvider, \"Ve0EQL38+dHv6TxgWnoeRoK9qVE=\");\n_c = AppProvider;\nexport const AppCont = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(AppCont, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n_c2 = AppCont;\nexport default AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppProvider\");\n$RefreshReg$(_c2, \"AppCont\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","_ref","_s","children","user","setUser","author","setAuthor","getUser","response","fetch","method","data","json","console","log","error","getAuthor","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","AppCont","_s2","_c2","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/Full-Stack Developer/main-crud/main-crud/src/Components/AppProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react'\r\nimport { useEffect } from 'react';\r\n\r\nconst AppContext = createContext(null);\r\nfunction AppProvider({ children }) {\r\n  const [user, setUser] = useState([])\r\n  const [author, setAuthor]= useState([])\r\n  useEffect(() => {\r\n    const getUser=async()=>{\r\n      try {\r\n          const response = await fetch(\"https://6421c7e934d6cd4ebd7bbdbe.mockapi.io/common\",{\r\n            method:\"GET\",\r\n          })\r\n          const data = await response.json()\r\n          console.log(data)\r\n          setUser(data)\r\n          if(!data){\r\n            console.log(\"data cound not fetch\")\r\n          }\r\n        }\r\n      catch (error) {\r\n        console.log(\"data not found\")\r\n      }\r\n      \r\n    }\r\n    getUser()\r\n\r\n    const getAuthor=async()=>{\r\n      try {\r\n          const response = await fetch(\"https://655b477aab37729791a8d482.mockapi.io/crud/api\",{\r\n            method:\"GET\",\r\n          })\r\n          const data = await response.json()\r\n          console.log(data)\r\n          setAuthor(data)\r\n          if(!data){\r\n            console.log(\"data cound not fetch\")\r\n          }\r\n        }\r\n      catch (error) {\r\n        console.log(\"data not found\")\r\n      }\r\n      \r\n    }\r\n    getAuthor()\r\n\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        user,\r\n        setUser,\r\n        author, \r\n        setAuthor\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\nexport const AppCont = () => {\r\n  return useContext(AppContext)\r\n}\r\n\r\nexport default AppProvider"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,gBAAGN,aAAa,CAAC,IAAI,CAAC;AACtC,SAASO,WAAWA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC/B,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAEZ,QAAQ,CAAC,EAAE,CAAC;EACvCC,SAAS,CAAC,MAAM;IACd,MAAMY,OAAO,GAAC,MAAAA,CAAA,KAAS;MACrB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,EAAC;UAChFC,MAAM,EAAC;QACT,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBP,OAAO,CAACO,IAAI,CAAC;QACb,IAAG,CAACA,IAAI,EAAC;UACPE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACrC;MACF,CAAC,CACH,OAAOC,KAAK,EAAE;QACZF,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B;IAEF,CAAC;IACDP,OAAO,EAAE;IAET,MAAMS,SAAS,GAAC,MAAAA,CAAA,KAAS;MACvB,IAAI;QACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAC;UAClFC,MAAM,EAAC;QACT,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBL,SAAS,CAACK,IAAI,CAAC;QACf,IAAG,CAACA,IAAI,EAAC;UACPE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACrC;MACF,CAAC,CACH,OAAOC,KAAK,EAAE;QACZF,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B;IAEF,CAAC;IACDE,SAAS,EAAE;EAGb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEnB,OAAA,CAACC,UAAU,CAACmB,QAAQ;IAClBC,KAAK,EAAE;MACLf,IAAI;MACJC,OAAO;MACPC,MAAM;MACNC;IACF,CAAE;IAAAJ,QAAA,EAEDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACW;AAE1B;AAACrB,EAAA,CAzDQF,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AA2DpB,OAAO,MAAMyB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOhC,UAAU,CAACK,UAAU,CAAC;AAC/B,CAAC;AAAA2B,GAAA,CAFYD,OAAO;AAAAE,GAAA,GAAPF,OAAO;AAIpB,eAAezB,WAAW;AAAA,IAAAwB,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}