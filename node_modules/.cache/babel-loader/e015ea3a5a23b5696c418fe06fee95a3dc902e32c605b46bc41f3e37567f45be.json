{"ast":null,"code":"// // import React, { useState } from 'react'\n// import { useHistory } from 'react-router-dom'\n// import Base from './Base'\n// import { AppCont } from './AppProvider'\n// import TextField from '@mui/material/TextField';\n// import Button from '@mui/material/Button';\n// import { useFormik } from 'formik';\n// import * as yup from 'yup'\n\n// //formik validation\n// const validationUser = yup.object({\n//   title: yup.string().required('Enter Title').min(2),\n//   author: yup.string().required('Enter Author').min(4),\n//   isbnNumber: yup.string().required('Enter ISBN Number').max(20),\n//   publicationdate: yup.string().required('Enter Date').max(20)\n// })\n// function AddAuthor() {\n\n//   const { values, handleChange, handleSubmit, handleBlur, errors, touched } = useFormik({\n//     initialValues: {\n//       title: \"\",\n//       author: \"\",\n//       isbnNumber: \"\",\n//       publicationdate: \"\",\n//     },\n//     validationSchema: validationUser,\n//     onSubmit: (newUser) => {\n//       adding(newUser)\n//     }\n//   })\n\n//   const { user, setUser } = AppCont()\n//   const history = useHistory()\n//   const adding = async (newUser) => {\n//     try {\n//       const response = await fetch(\"https://6421c7e934d6cd4ebd7bbdbe.mockapi.io/common\", {\n//         method: \"POST\",\n//         body: JSON.stringify(newUser),\n//         headers: {\n//           \"Content-Type\": \"application/json\"\n//         }\n//       })\n//       const data = await response.json()\n//       console.log(data)\n//       setUser([...user, data])\n//       history.push('/')\n//     } catch (error) {\n//       console.log(\"data not found\")\n//     }\n\n//   }\n//   return (\n//     <Base tittle=\"Add User\">\n//       <form onSubmit={handleSubmit} className=\"adduser-style container\">\n\n//         <TextField label=\"Title\" color=\"success\" focused\n//           value={values.title}\n//           name=\"title\"\n//           onChange={handleChange}\n//           onBlur={handleBlur}\n//         />\n//         {touched.title && errors.title ? <p style={{ color: \"crimson\", fontSize: \"8px\", }}>{errors.title}</p> : \"\"}\n//         <TextField label=\"Author\" color=\"success\" focused\n//           value={values.author}\n//           name=\"author\"\n//           onBlur={handleBlur}\n//           onChange={handleChange}\n//            />\n//         {touched.author && errors.author ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.author}</p> : \"\"}\n//         <TextField label=\"ISBN Number\" color=\"success\" focused\n//           value={values.isbnNumber}\n//           name=\"isbnNumber\"\n//           onBlur={handleBlur}\n//           onChange={handleChange} \n//           />\n//         {touched.isbnNumber && errors.isbnNumber ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.isbnNumber}</p> : \"\"}\n//         <TextField label=\"Publication Date\" color=\"success\" focused\n//           value={values.publicationDate}\n//           name=\"publicationDate\"\n//           onBlur={handleBlur}\n//           onChange={handleChange}\n//            />\n\n//         {touched.publicationdate && errors.publicationdate ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.publicationdate}</p> : \"\"}\n//         <Button type=\"submit\" variant=\"contained\" color=\"success\" onClick={adding} >Add Book</Button>\n//       </form>\n//     </Base>\n//   )\n// }\n\n// export default AddAuthor","map":{"version":3,"names":[],"sources":["C:/Users/Lenovo/Desktop/Full-Stack Developer/main-crud/main-crud/src/Components/AddAuthor.js"],"sourcesContent":["// // import React, { useState } from 'react'\r\n// import { useHistory } from 'react-router-dom'\r\n// import Base from './Base'\r\n// import { AppCont } from './AppProvider'\r\n// import TextField from '@mui/material/TextField';\r\n// import Button from '@mui/material/Button';\r\n// import { useFormik } from 'formik';\r\n// import * as yup from 'yup'\r\n\r\n// //formik validation\r\n// const validationUser = yup.object({\r\n//   title: yup.string().required('Enter Title').min(2),\r\n//   author: yup.string().required('Enter Author').min(4),\r\n//   isbnNumber: yup.string().required('Enter ISBN Number').max(20),\r\n//   publicationdate: yup.string().required('Enter Date').max(20)\r\n// })\r\n// function AddAuthor() {\r\n\r\n//   const { values, handleChange, handleSubmit, handleBlur, errors, touched } = useFormik({\r\n//     initialValues: {\r\n//       title: \"\",\r\n//       author: \"\",\r\n//       isbnNumber: \"\",\r\n//       publicationdate: \"\",\r\n//     },\r\n//     validationSchema: validationUser,\r\n//     onSubmit: (newUser) => {\r\n//       adding(newUser)\r\n//     }\r\n//   })\r\n\r\n//   const { user, setUser } = AppCont()\r\n//   const history = useHistory()\r\n//   const adding = async (newUser) => {\r\n//     try {\r\n//       const response = await fetch(\"https://6421c7e934d6cd4ebd7bbdbe.mockapi.io/common\", {\r\n//         method: \"POST\",\r\n//         body: JSON.stringify(newUser),\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\"\r\n//         }\r\n//       })\r\n//       const data = await response.json()\r\n//       console.log(data)\r\n//       setUser([...user, data])\r\n//       history.push('/')\r\n//     } catch (error) {\r\n//       console.log(\"data not found\")\r\n//     }\r\n\r\n\r\n//   }\r\n//   return (\r\n//     <Base tittle=\"Add User\">\r\n//       <form onSubmit={handleSubmit} className=\"adduser-style container\">\r\n\r\n//         <TextField label=\"Title\" color=\"success\" focused\r\n//           value={values.title}\r\n//           name=\"title\"\r\n//           onChange={handleChange}\r\n//           onBlur={handleBlur}\r\n//         />\r\n//         {touched.title && errors.title ? <p style={{ color: \"crimson\", fontSize: \"8px\", }}>{errors.title}</p> : \"\"}\r\n//         <TextField label=\"Author\" color=\"success\" focused\r\n//           value={values.author}\r\n//           name=\"author\"\r\n//           onBlur={handleBlur}\r\n//           onChange={handleChange}\r\n//            />\r\n//         {touched.author && errors.author ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.author}</p> : \"\"}\r\n//         <TextField label=\"ISBN Number\" color=\"success\" focused\r\n//           value={values.isbnNumber}\r\n//           name=\"isbnNumber\"\r\n//           onBlur={handleBlur}\r\n//           onChange={handleChange} \r\n//           />\r\n//         {touched.isbnNumber && errors.isbnNumber ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.isbnNumber}</p> : \"\"}\r\n//         <TextField label=\"Publication Date\" color=\"success\" focused\r\n//           value={values.publicationDate}\r\n//           name=\"publicationDate\"\r\n//           onBlur={handleBlur}\r\n//           onChange={handleChange}\r\n//            />\r\n            \r\n//         {touched.publicationdate && errors.publicationdate ? <p style={{ color: \"crimson\", fontSize: \"8px\" }}>{errors.publicationdate}</p> : \"\"}\r\n//         <Button type=\"submit\" variant=\"contained\" color=\"success\" onClick={adding} >Add Book</Button>\r\n//       </form>\r\n//     </Base>\r\n//   )\r\n// }\r\n\r\n// export default AddAuthor\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}